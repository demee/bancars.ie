{"version":3,"sources":["components/counter/Counter.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Counter","props","state","barWidth","style","reasons","this","tick","intervalID","setInterval","clearInterval","startDate","targetDate","targetCount","startCount","int","Interval","fromDateTimes","count","invalid","Error","diff","todayInt","DateTime","local","setState","Math","floor","r","random","length","viewBox","type","x","y","fontFamily","fontSize","value","displayType","thousandSeparator","renderText","width","height","fill","float","marginLeft","React","Component","defaultProps","App","carCountDateStart","fromObject","year","month","day","carCountDateEnd","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAOqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GAEZ,EAAKC,MAAQ,yBACb,EAAKC,QAAU,CACb,8BACA,kBACA,sBACA,mBAVe,E,gEAcE,IAAD,OAClBC,KAAKC,OACLD,KAAKE,WAAaC,aAChB,kBAAM,EAAKF,SACX,O,6CAKFG,cAAcJ,KAAKE,c,6BAGb,IAAD,EAGDF,KAAKL,MADPU,EAFG,EAEHA,UAAWC,EAFR,EAEQA,WAAYC,EAFpB,EAEoBA,YAAaC,EAFjC,EAEiCA,WAGhCC,EAAMC,WAASC,cAAcN,EAAWC,GAAYM,MAAM,WAEhE,GAAIH,EAAII,QACN,MAAM,IAAIC,MAAML,EAAII,SAGtB,IAAME,EAAOR,EAAcC,EAErBQ,EAAWN,WAASC,cAAcN,EAAWY,WAASC,SAASN,MAAM,WAE3EZ,KAAKmB,SAAS,CACZtB,SAAamB,EAAWP,EAAOM,EAAQ,EAAK,IAC5CH,MAAOJ,EAAaY,KAAKC,MAAOL,EAAWP,EAAOM,O,+BAI5C,IAAD,EACqBf,KAAKJ,MAAzBgB,EADD,EACCA,MAAOf,EADR,EACQA,SACTyB,EAAC,iCAA6BtB,KAAKD,QAAQqB,KAAKC,MAAMD,KAAKG,SAAWvB,KAAKD,QAAQyB,UACzF,OACE,gCACE,2CACA,sBAAKC,QAAQ,aAAb,UACE,+BACE,uBAAOC,KAAK,WAAZ,gKAIF,sBAAMC,EAAE,IAAIC,EAAE,KAAK9B,MAAO,CAAE+B,WAAY,cAAeC,SAAU,QAAjE,SACE,cAAC,IAAD,CAAcC,MAAOnB,EAAOoB,YAAY,OAAOC,mBAAiB,EAACC,WAAY,SAACH,GAAD,OAAWA,OAG1F,sBAAMJ,EAAG,IAAM9B,EAAU+B,EAAE,KAAKO,MAAOtC,EAAUuC,OAAO,MACxD,sBAAMT,EAAG,IAAM9B,EAAW,EAAG+B,EAAE,KAAK9B,MAAO,CAAEgC,SAAU,OAAvD,0BACA,sBAAMH,EAAG,IAAM9B,EAAW,EAAG+B,EAAE,OAAO9B,MAAO,CAAEgC,SAAU,MAAOO,KAAM,QAAtE,SAAiFf,OAEnF,wEACA,sBAAMxB,MAAO,CAAEwC,MAAO,OAAQC,WAAY,QAA1C,kC,GArE6BC,IAAMC,YAkF3C/C,EAAQgD,aAAe,CACrBlC,WAAY,GCpECmC,MAjBf,WACE,IAEMC,EAAoB3B,WAAS4B,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KACtEC,EAAkBhC,WAAS4B,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KAC1E,OACE,qBAAKE,UAAU,MAAf,SACE,cAAC,EAAD,CACE7C,UAAWuC,EACXtC,WAAY2C,EACZzC,WATgB,QAUhBD,YATiB,aCOV4C,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.314f0b39.chunk.js","sourcesContent":["import React from 'react';\nimport { DateTime, Interval } from 'luxon';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\n\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      barWidth: 0,\n    };\n    this.style = 'font-family: \\'Roboto\\';';\n    this.reasons = [\n      'steal children independence',\n      'pollute the air',\n      'increase congestion',\n      'make more noise',\n    ];\n  }\n\n  componentDidMount() {\n    this.tick();\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000,\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    const {\n      startDate, targetDate, targetCount, startCount,\n    } = this.props;\n\n    const int = Interval.fromDateTimes(startDate, targetDate).count('seconds');\n\n    if (int.invalid) {\n      throw new Error(int.invalid);\n    }\n\n    const diff = targetCount - startCount;\n\n    const todayInt = Interval.fromDateTimes(startDate, DateTime.local()).count('seconds');\n\n    this.setState({\n      barWidth: (((todayInt / int) * diff) % 1) * 100,\n      count: startCount + Math.floor((todayInt / int) * diff),\n    });\n  }\n\n  render() {\n    const { count, barWidth } = this.state;\n    const r = `a new one is coming to ${this.reasons[Math.floor(Math.random() * this.reasons.length)]}`;\n    return (\n      <div>\n        <h2>There are</h2>\n        <svg viewBox=\"0 0 100 25\">\n          <defs>\n            <style type=\"text/css\">\n              @import url(https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic);\n            </style>\n          </defs>\n          <text x=\"5\" y=\"17\" style={{ fontFamily: 'Yusei Magic', fontSize: '20px' }}>\n            <NumberFormat value={count} displayType=\"text\" thousandSeparator renderText={(value) => value} />\n          </text>\n\n          <rect x={100 - barWidth} y=\"20\" width={barWidth} height=\"2\" />\n          <text x={100 - barWidth - 2} y=\"22\" style={{ fontSize: '3px' }}>ðŸš—</text>\n          <text x={100 - barWidth + 2} y=\"21.5\" style={{ fontSize: '2px', fill: '#fff' }}>{r}</text>\n        </svg>\n        <h2>cars too many on irish roads, #bancars</h2>\n        <span style={{ float: 'left', marginLeft: '10px' }}>* - estimated</span>\n      </div>\n    );\n  }\n}\n\nCounter.propTypes = {\n  startDate: PropTypes.string.isRequired,\n  targetDate: PropTypes.string.isRequired,\n  targetCount: PropTypes.number.isRequired,\n  startCount: PropTypes.number,\n};\n\nCounter.defaultProps = {\n  startCount: 0,\n};\n","import React from 'react';\nimport { DateTime } from 'luxon';\nimport './App.css';\nimport Counter from './components/counter/Counter';\n\nfunction App() {\n  const carCountStart = 2805839;\n  const carCountTarget = 2805839 + 88000 + 100000;\n  const carCountDateStart = DateTime.fromObject({ year: 2019, month: 12, day: 31 });\n  const carCountDateEnd = DateTime.fromObject({ year: 2021, month: 12, day: 31 });\n  return (\n    <div className=\"App\">\n      <Counter\n        startDate={carCountDateStart}\n        targetDate={carCountDateEnd}\n        startCount={carCountStart}\n        targetCount={carCountTarget}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/bootstrap-icons/font/bootstrap-icons.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}