{"version":3,"sources":["components/counter/Counter.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Counter","props","targetDate","DateTime","fromObject","year","month","day","targetCount","startDate","startCount","state","style","console","log","int","Interval","fromDateTimes","this","count","diff","todayInt","local","setState","barWidth","Math","floor","intervalID","setInterval","tick","clearInterval","viewBox","type","x","y","fontFamily","fontSize","value","displayType","thousandSeparator","renderText","width","height","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAMqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,WAAaC,WAASC,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KACpE,EAAKC,YAAc,QACnB,EAAKC,UAAYN,WAASC,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KACnE,EAAKG,WAAa,QAClB,EAAKC,MAAQ,GACb,EAAKC,MAAQ,yBAPE,E,mDAUfC,QAAQC,IAAI,QACZ,IAAIC,EAAMC,WAASC,cAAcC,KAAKT,UAAWS,KAAKhB,YAAYiB,MAAM,WAEpEC,EAAOF,KAAKV,YAAcU,KAAKR,WAE/BW,EAAWL,WAASC,cAAcC,KAAKT,UAAWN,WAASmB,SAASH,MAAM,WAE9ED,KAAKK,SAAS,CACVC,SAAYH,EAASN,EAAMK,EAAQ,EAAK,IACxCD,MAAOD,KAAKR,WAAae,KAAKC,MAAOL,EAAWN,EAAOK,O,0CAI1C,IAAD,OAChBF,KAAKS,WAAaC,aACd,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcZ,KAAKS,c,+BAInB,OAAQ,gCACJ,2CACA,sBAAKI,QAAQ,aAAb,UACI,+BACI,uBAAOC,KAAK,WAAZ,kKAIJ,sBAAMC,EAAE,IAAIC,EAAE,KAAKtB,MAAO,CAAEuB,WAAY,cAAeC,SAAU,QAAjE,SACI,cAAC,IAAD,CAAcC,MAAOnB,KAAKP,MAAMQ,MAAQmB,YAAa,OAAQC,mBAAmB,EAAMC,WAAY,SAAAH,GAAK,OAAIA,OAE/G,sBAAMJ,EAAG,IAAMf,KAAKP,MAAMa,SAAUU,EAAE,KAAKO,MAAOvB,KAAKP,MAAMa,SAAUkB,OAAO,MAC9E,sBAAMT,EAAG,IAAMf,KAAKP,MAAMa,SAAW,EAAGU,EAAE,KAAKtB,MAAO,CAACwB,SAAU,OAAjE,6BAEA,+E,GAlDqBO,IAAMC,YCK5BC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d869c890.chunk.js","sourcesContent":["import React from 'react';\nimport { DateTime, Interval } from 'luxon';\nimport NumberFormat from 'react-number-format';\n\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n    constructor(props) {\n        super(props)\n        this.targetDate = DateTime.fromObject({ year: 2021, month: 12, day: 31 });\n        this.targetCount = 2805839 + 88000 + 100000;\n        this.startDate = DateTime.fromObject({ year: 2019, month: 12, day: 31 });\n        this.startCount = 2805839;\n        this.state = {};\n        this.style = \"font-family: 'Roboto';\";    \n    }\n    tick() {\n        console.log('tick')\n        let int = Interval.fromDateTimes(this.startDate, this.targetDate).count('seconds');\n\n        let diff = this.targetCount - this.startCount;\n\n        let todayInt = Interval.fromDateTimes(this.startDate, DateTime.local()).count('seconds');\n\n        this.setState({\n            barWidth: ((todayInt/int * diff) % 1) * 100,\n            count: this.startCount + Math.floor((todayInt / int) * diff)\n        });\n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    render() {\n        return (<div>\n            <h2>There are</h2>\n            <svg viewBox=\"0 0 100 25\">\n                <defs>\n                    <style type=\"text/css\">\n                        @import url('https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic');\n                    </style>\n                </defs>\n                <text x=\"5\" y=\"17\" style={{ fontFamily: 'Yusei Magic', fontSize: '20px'}} >\n                    <NumberFormat value={this.state.count}  displayType={'text'} thousandSeparator={true} renderText={value => value}/>\n                </text>\n                <rect x={100 - this.state.barWidth} y=\"20\" width={this.state.barWidth} height=\"2\"></rect>\n                <text x={100 - this.state.barWidth - 2} y=\"22\" style={{fontSize: '3px'}}>ðŸš—</text>\n            </svg>\n                <h2>cars too many on irish roads, #bancars</h2>         \n        </div>)\n    }\n}","import './App.css';\nimport Counter from './components/counter/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n        <Counter></Counter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/bootstrap-icons/font/bootstrap-icons.css'\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}