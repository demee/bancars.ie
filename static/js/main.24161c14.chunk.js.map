{"version":3,"sources":["components/counter/Counter.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Counter","props","state","barWidth","style","console","log","int","Interval","fromDateTimes","this","startDate","targetDate","count","invalid","Error","diff","targetCount","startCount","todayInt","DateTime","local","setState","Math","floor","tick","intervalID","setInterval","clearInterval","viewBox","type","x","y","fontFamily","fontSize","value","displayType","thousandSeparator","renderText","cursor","fill","fontStyle","width","height","float","marginLeft","React","Component","App","carCountDateStart","fromObject","year","month","day","carCountDateEnd","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAMqBA,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GAEZ,EAAKC,MAAQ,yBALI,E,mDASjBC,QAAQC,IAAI,KAEZ,IAAIC,EAAMC,WAASC,cAAcC,KAAKT,MAAMU,UAAWD,KAAKT,MAAMW,YAAYC,MAAM,WAEpF,GAAIN,EAAIO,QACN,MAAM,IAAIC,MAAMR,EAAIO,SAGtB,IAAIE,EAAON,KAAKT,MAAMgB,YAAcP,KAAKT,MAAMiB,WAE3CC,EAAWX,WAASC,cAAcC,KAAKT,MAAMU,UAAWS,WAASC,SAASR,MAAM,WAEpFH,KAAKY,SAAS,CACZnB,SAAYgB,EAAWZ,EAAMS,EAAQ,EAAK,IAC1CH,MAAOH,KAAKT,MAAMiB,WAAaK,KAAKC,MAAOL,EAAWZ,EAAOS,O,0CAI5C,IAAD,OAClBN,KAAKe,OACLf,KAAKgB,WAAaC,aAChB,kBAAM,EAAKF,SACX,O,6CAKFG,cAAclB,KAAKgB,c,+BAInB,OAAQ,gCACN,2CACA,sBAAKG,QAAQ,aAAb,UACE,+BACE,uBAAOC,KAAK,WAAZ,kKAIF,sBAAMC,EAAE,IAAIC,EAAE,KAAK5B,MAAO,CAAE6B,WAAY,cAAeC,SAAU,QAAjE,SACE,cAAC,IAAD,CAAcC,MAAOzB,KAAKR,MAAMW,MAAOuB,YAAa,OAAQC,mBAAmB,EAAMC,WAAY,SAAAH,GAAK,OAAIA,OAE5G,sBAAMJ,EAAE,KAAKC,EAAE,KAAK5B,MAAO,CAAEmC,OAAQ,UAAWC,KAAM,OAAQP,WAAY,cAAeC,SAAU,OAAQO,UAAW,cAAtH,eAGA,sBAAMV,EAAG,IAAMrB,KAAKR,MAAMC,SAAU6B,EAAE,KAAKU,MAAOhC,KAAKR,MAAMC,SAAUwC,OAAO,MAC9E,sBAAMZ,EAAG,IAAMrB,KAAKR,MAAMC,SAAW,EAAG6B,EAAE,KAAK5B,MAAO,CAAE8B,SAAU,OAAlE,0BACA,sBAAMH,EAAG,IAAMrB,KAAKR,MAAMC,SAAW,EAAG6B,EAAE,OAAO5B,MAAO,CAAE8B,SAAU,MAAOM,KAAM,QAAjF,iDAEF,wEACA,sBAAMpC,MAAO,CAACwC,MAAO,OAAQC,WAAY,QAAzC,kC,GA5D+BC,IAAMC,YCe5BC,MAjBf,WACE,IAEIC,EAAoB7B,WAAS8B,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KACtEC,EAAkBlC,WAAS8B,WAAW,CAAEC,KAAM,KAAMC,MAAO,GAAIC,IAAK,KACxE,OACE,qBAAKE,UAAU,MAAf,SACI,cAAC,EAAD,CACE5C,UAAWsC,EACXrC,WAAY0C,EACZpC,WATY,QAUZD,YATa,aCMRuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.24161c14.chunk.js","sourcesContent":["import React from 'react';\nimport { DateTime, Interval } from 'luxon';\nimport NumberFormat from 'react-number-format';\n\nimport './Counter.css';\n\nexport default class Counter extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      barWidth: 0\n    };\n    this.style = \"font-family: 'Roboto';\";\n\n  }\n  tick() {\n    console.log(\".\")\n\n    let int = Interval.fromDateTimes(this.props.startDate, this.props.targetDate).count('seconds');\n\n    if (int.invalid) {\n      throw new Error(int.invalid);\n    }\n\n    let diff = this.props.targetCount - this.props.startCount;\n\n    let todayInt = Interval.fromDateTimes(this.props.startDate, DateTime.local()).count('seconds');\n\n    this.setState({\n      barWidth: ((todayInt / int * diff) % 1) * 100,\n      count: this.props.startCount + Math.floor((todayInt / int) * diff)\n    });\n  }\n\n  componentDidMount() {\n    this.tick();\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return (<div>\n      <h2>There are</h2>\n      <svg viewBox=\"0 0 100 25\">\n        <defs>\n          <style type=\"text/css\">\n            @import url('https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic');\n          </style>\n        </defs>\n        <text x=\"5\" y=\"17\" style={{ fontFamily: 'Yusei Magic', fontSize: '20px' }} >\n          <NumberFormat value={this.state.count} displayType={'text'} thousandSeparator={true} renderText={value => value} />\n        </text>\n        <text x=\"93\" y=\"10\" style={{ cursor: \"pointer\", fill: \"blue\", fontFamily: 'Yusei Magic', fontSize: '10px', fontStyle: 'underscore'}}>\n          *\n        </text>\n        <rect x={100 - this.state.barWidth} y=\"20\" width={this.state.barWidth} height=\"2\"></rect>\n        <text x={100 - this.state.barWidth - 2} y=\"22\" style={{ fontSize: '3px' }}>ðŸš—</text>\n        <text x={100 - this.state.barWidth + 2} y=\"21.5\" style={{ fontSize: '2px', fill: '#fff' }}>a new one is coming... brum brum</text>\n      </svg>\n      <h2>cars too many on irish roads, #bancars</h2>\n      <span style={{float: 'left', marginLeft: '10px'}}>* - estimated</span>\n    </div>)\n  }\n}","import './App.css';\nimport Counter from './components/counter/Counter';\nimport { DateTime } from 'luxon';\n\nfunction App() {\n  let carCountStart = 2805839;\n  let carCountTarget = 2805839 + 88000 + 100000; \n  let carCountDateStart = DateTime.fromObject({ year: 2019, month: 12, day: 31 });\n  let carCountDateEnd = DateTime.fromObject({ year: 2021, month: 12, day: 31 });\n  return (\n    <div className=\"App\">      \n        <Counter \n          startDate={carCountDateStart}\n          targetDate={carCountDateEnd}\n          startCount={carCountStart} \n          targetCount={carCountTarget}>\n        </Counter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport '../node_modules/bootstrap-icons/font/bootstrap-icons.css'\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}